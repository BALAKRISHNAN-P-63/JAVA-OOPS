class Data {
    private int value;
    private boolean available = false;

    // Producer puts data
    public synchronized void put(int val) {
        while (available) { // wait if data is already available
            try {
                wait();
            } catch (InterruptedException e) {}
        }
        value = val;
        available = true;
        System.out.println("Produced: " + val);
        notify(); // Notify consumer
    }

    // Consumer gets data
    public synchronized int get() {
        while (!available) { // wait if no data available
            try {
                wait();
            } catch (InterruptedException e) {}
        }
        available = false;
        System.out.println("Consumed: " + value);
        notify(); // Notify producer
        return value;
    }
}

// Producer thread
class Producer extends Thread {
    Data data;
    public Producer(Data data) { this.data = data; }
    public void run() {
        for (int i = 1; i <= 5; i++) {
            data.put(i);
        }
    }
}

// Consumer thread
class Consumer extends Thread {
    Data data;
    public Consumer(Data data) { this.data = data; }
    public void run() {
        for (int i = 1; i <= 5; i++) {
            data.get();
        }
    }
}

public class InterThreadCommunication {
    public static void main(String[] args) {
        Data data = new Data();
        Producer p = new Producer(data);
        Consumer c = new Consumer(data);

        p.start();
        c.start();
    }
}

#OUTPUT
Produced: 1
Consumed: 1
Produced: 2
Consumed: 2
Produced: 3
Consumed: 3
Produced: 4
Consumed: 4
Produced: 5
Consumed: 5
